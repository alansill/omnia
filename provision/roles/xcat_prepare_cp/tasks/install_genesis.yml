# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Initialize genesis_image_creation status
  ansible.builtin.set_fact:
    genesis_image_creation: false

- name: Check existing genesis base version
  ansible.builtin.shell: >
    set -o pipefail && \
    rpm -qa | grep xCAT-genesis-base-x86_64
  changed_when: false
  failed_when: false
  register: genesis_version_check
  args:
    warn: false

- name: Set genesis_image_creation status
  ansible.builtin.set_fact:
    genesis_image_creation: true
  when: xcat_git_version not in genesis_version_check.stdout

- name: Create genesis image
  when: genesis_image_creation
  block:
    - name: Untar genesis base package
      ansible.builtin.command: tar -xvzf "{{ xcat_genesis_tar_file }}" -C "{{ role_path }}/files"
      changed_when: true
      register: untar_genesis_base
      until: untar_genesis_base is not failed
      retries: "{{ max_retries }}"
      args:
        warn: false

    - name: Remove existing genesis base rpm
      ansible.builtin.command: rpm -e --nodeps {{ genesis_version_check.stdout }}
      changed_when: true
      when: genesis_version_check.stdout | length > 1
      args:
        warn: false

    - name: Install genesis base rpm file generated
      ansible.builtin.command: rpm -ivh "{{ xcat_genesis_rpm_file }}"
      changed_when: true
      args:
        warn: false

- name: Check doxcat script applied
  ansible.builtin.shell: >
    set -o pipefail && \
    cat {{ doxcat_script_path }} | grep '{{ doxcat_check_key }}'
  changed_when: false
  failed_when: false
  register: doxcat_check

- name: Apply doxcat patch
  when: doxcat_check_key not in doxcat_check.stdout
  block:
    - name: Copy doxcat patch
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      with_items: "{{ doxcat_patch_path }}"

    - name: Patch doxcat file
      ansible.builtin.shell: patch doxcat < doxcat.patch
      changed_when: true
      args:
        chdir: "{{ xcat_bin_path }}"
        warn: false

    - name: Delete doxcat script patch
      ansible.builtin.file:
        path: "{{ item.dest }}"
        state: absent
      with_items: "{{ doxcat_patch_path }}"

- name: Create genesis image
  ansible.builtin.command: "mknb {{ control_plane_arch }}"
  changed_when: true
  when:
    - genesis_image_creation or
      doxcat_check_key not in doxcat_check.stdout
