#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Tasks for k8s_common role
  when: hostvars['127.0.0.1']['k8s_support']
  block:
    - name: Update sysctl to handle incorrectly routed traffic when iptables is bypassed
      ansible.builtin.copy:
        src: k8s.conf
        dest: "{{ k8s_conf_dest }}"
        owner: root
        group: root
        mode: "{{ k8s_conf_file_mode }}"
      tags: install

    - name: Update sysctl
      ansible.builtin.command: /sbin/sysctl --system
      changed_when: true
      tags: install

    - name: modeprobe ip_tables
      ansible.builtin.command: /usr/sbin/modprobe ip_tables
      changed_when: true
      when: ansible_facts['os_family'] == "RedHat"
      tags: install

    - block:
        - name: Add kubernetes repo
          ansible.builtin.yum_repository:
            name: kubernetes
            description: kubernetes
            baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled: yes
            gpgcheck: no
            repo_gpgcheck: no
            gpgkey:
              - https://packages.cloud.google.com/yum/doc/yum-key.gpg
              - https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
          tags: install

        - name: Add docker community edition repository
          get_url:
            url: "{{ docker_repo_url }}"
            dest: "{{ docker_repo_dest }}"
          register: docker_repo
          until: docker_repo is not failed
          retries: "{{ max_retries }}"
          delay: "{{ max_delay }}"
          tags: install

        - name: Install k8s packages
          ansible.builtin.package:
            name: "{{ k8s_packages }}"
            state: present
          tags: install

        - name: Install docker packages
          ansible.builtin.package:
            name: "{{ docker_packages }}"
            state: present
          tags: install

        - name: Versionlock kubernetes and docker
          ansible.builtin.command: "yum versionlock '{{ item }}'"
          args:
            warn: false
          with_items:
            - "{{ k8s_packages }}"
            - "{{ docker_packages }}"
          changed_when: true
          tags: install
      when: os_supported_leap not in compute_os

    - block:
        - name: Add docker community edition repository
          get_url:
            url: "{{ docker_repo_url_leap }}"
            dest: "{{ docker_repo_dest_leap }}"
          register: docker_repo
          until: docker_repo is not failed
          retries: "{{ max_retries }}"
          delay: "{{ max_delay }}"
          tags: install

        - name: Install docker-compose for leap nodes
          package:
            name: docker-compose
            state: present
          tags: install

        - name: Add kubernetes repo
          community.general.zypper_repository:
            name: google-k8s
            repo: "{{ k8s_repo_leap }}"
            state: present
            autorefresh: yes
            disable_gpg_check: yes
          tags: install

        - name: Import rpm-package key for installing kubernetes
          ansible.builtin.rpm_key:
            key: "{{ rpm_pkg_leap }}"
            state: present
          tags: install

        - name: Import yum key for installing kubernetes
          ansible.builtin.rpm_key:
            key: "{{ yum_key_leap }}"
            state: present
          tags: install

        - name: Import gpg-pubkey key for installing kubernetes
          ansible.builtin.command: "{{ gpg_pubkey_leap }}"
          args:
            warn: false
          changed_when: false
          tags: install

        - name: Refresh repositories and installing conntrack-tools
          ansible.builtin.package:
            name: conntrack-tools
            state: present
          tags: install

        - name: Install Kubeadm
          ansible.builtin.expect:
            command: zypper install --oldpackage "{{ kubeadm_version }}"
            responses:
                (.*) [1/2/c/d/?](.): '2'
                (.*)(y): 'y'
          register: kubeadm_status
          until: kubeadm_status is not failed
          retries: "{{ max_retries }}"
          tags: install

        - name: Install Kubelet
          ansible.builtin.expect:
            command: zypper install --oldpackage "{{ kubelet_version }}"
            responses:
                (.*) [1/2/c/d/?](.): '2'
                (.*)(y): 'y'
          register: kubelet_status
          until: kubelet_status is not failed
          retries: "{{ max_retries }}"
          tags: install

        - name: Fetch status of kubectl
          ansible.builtin.command: kubectl version
          failed_when: false
          changed_when: false
          register: status_kubectl
          tags: install

        - name: Install Kubectl
          community.general.zypper:
            name: "{{ kubectl_version }}"
            state: present
            oldpackage: yes
            force: yes
          register: state_kubectl
          until: state_kubectl is not failed
          retries: "{{ max_retries }}"
          tags: install
          when: hostvars['127.0.0.1']['k8s_version'] not in status_kubectl.stdout

        - name: Versionlock k8s packages
          ansible.builtin.command: zypper addlock {{ item }}
          args:
            warn: false
          changed_when: false
          with_items: "{{ k8s_package_names }}"
          tags: install
      when: ( os_supported_leap in compute_os ) and ( ansible_distribution_version >= os_supported_leap_version )

    - name: Start and enable docker service
      ansible.builtin.service:
        name: docker
        state: restarted
        enabled: yes
      tags: install

    - name: Start and enable kubernetes - kubelet
      ansible.builtin.service:
        name: kubelet
        state: restarted
        enabled: yes
      tags: install

    - name: Initialize grafana_status
      ansible.builtin.set_fact:
        grafana_status: false
        grafana_cred_status: false

    - name: Check for grafana folder existence
      ansible.builtin.stat:
        path: "{{ grafana_conf_path }}"
      register: grafana_file_status
      delegate_to: localhost
      run_once: true

    - name: Check for grafana_username and password
      ansible.builtin.set_fact:
        grafana_cred_status: true
      when:
        - grafana_username is defined
        - grafana_password is defined
        - grafana_username | length >= min_length_grafana
        - grafana_password | length >= min_length_grafana

    - name: Save grafana crendentials
      ansible.builtin.set_fact:
        grafana_svc_ip: "{{ lookup('ini', 'ip section=grafana_svc file=/opt/omnia/.data/grafana_svc_details.ini') }}"
        grafana_svc_port: "{{ lookup('ini', 'port section=grafana_svc file=/opt/omnia/.data/grafana_svc_details.ini') }}"
        grafana_status: true
      delegate_to: localhost
      run_once: true
      when: grafana_file_status.stat.exists
