#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Tasks for slurm_common role
  when: hostvars['127.0.0.1']['slurm_support']
  block:
    - name: Get hostname
      ansible.builtin.command: hostname
      register: host_name
      changed_when: true

    - name: Add host name in file
      ansible.builtin.replace:
        dest: "{{ hostname_dest }}"
        regexp: localhost.localdomain
        replace: "{{ host_name.stdout }}"
        backup: yes
        mode: "{{ common_mode }}"

    - name: Enable powertools repo in Rocky 8
      ansible.builtin.command: dnf config-manager --set-enabled powertools -y
      when:
        - ( ansible_distribution | lower == os_centos ) or
          ( ansible_distribution | lower == os_rocky )
        - ( ansible_distribution_version >= os_version )

    - name: Add python dependent packages for CentOS 7.9
      ansible.builtin.package:
        name: "{{ common_python2_packages }}"
        state: present
      tags: install
      when:
        - ( ansible_distribution | lower == os_centos )
        - ( ansible_distribution_version < os_version )

    - name: Add python dependent packages for CentOS version > 8 and Rocky 8
      ansible.builtin.package:
        name: "{{ common_python3_packages }}"
        state: present
      tags: install
      when:
        - ( ansible_distribution | lower == os_centos ) or
          ( ansible_distribution | lower == os_rocky )
        - ( ansible_distribution_version >= os_version )

    - name: Install packages for slurm
      ansible.builtin.package:
        name: "{{ common_packages }}"
        state: present
      tags: install
      when: os_supported_leap not in compute_os

    - name: Install packages for slurm
      ansible.builtin.package:
        name: "{{ leap_common_packages }}"
        state: present
      when: os_supported_leap in compute_os

    - name: Create munge key
      ansible.builtin.command: "{{ munge_cmd }}"
      changed_when: true
      when: os_supported_leap not in compute_os

    - name: Create munge key
      ansible.builtin.shell: dd if=/dev/random bs=1 count=1024 >/etc/munge/munge.key
      changed_when: true
      when: os_supported_leap in compute_os

    - name: Copy munge key
      ansible.builtin.copy:
        src: munge.key
        dest: "{{ munge_dest }}"
        owner: munge
        group: munge
        mode: "{{ munge_mode }}"
      tags: install

    - name: Slurm configuration - slurm.conf
      ansible.builtin.copy:
        src: slurm.conf
        dest: "{{ slurm_dest }}"
        mode: "{{ slurm_mode }}"
      tags: install

    - name: Add cluster name
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "ClusterName="
        line: "ClusterName={{ cluster_name }}"

    - name: Add slurm user name
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "SlurmUser="
        line: "SlurmUser={{ slurm_user }}"

    - name: Add slurmctld port no
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "SlurmctldPort="
        line: "SlurmctldPort={{ slurmctld_port }}"

    - name: Add slurmd port no
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "SlurmdPort="
        line: "SlurmdPort={{ slurmd_port }}"

    - name: Add srun port range
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "SrunPortRange="
        line: "SrunPortRange={{ srun_port_range }}"

    - name: Add spool path
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "SlurmdSpoolDir="
        line: "SlurmdSpoolDir={{ spool_pth }}"

    - name: Add slurmctld pid file path
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "SlurmctldPidFile="
        line: "SlurmctldPidFile={{ slurmctld_pid }}"

    - name: Add slurmd pid file path
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "SlurmdPidFile="
        line: "SlurmdPidFile={{ slurmd_pid }}"

    - name: Add slurmctld log file path
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "SlurmctldLogFile="
        line: "SlurmctldLogFile={{ slurmctld_log }}"

    - name: Add slurmd log file path
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "SlurmdLogFile="
        line: "SlurmdLogFile={{ slurmd_log }}"

    - name: Add accounting storage port no
      ansible.builtin.lineinfile:
        path: "{{ slurm_confpth }}"
        regexp: "AccountingStoragePort="
        line: "AccountingStoragePort={{ acct_port }}"

    - name: Create slurm group
      ansible.builtin.group:
        name: slurm
        state: present
      tags: install

    - name: Add the user 'slurm' with uid 6001 and a primary group of 'slurm'
      ansible.builtin.user:
        name: slurm
        comment: Slurm User Account
        uid: "{{ slurm_uid }}"
        group: slurm
      tags: install

    - name: Create slurm log directory
      ansible.builtin.file:
        path: "{{ slurm_logpth }}"
        state: directory
        owner: slurm
        group: slurm
        mode: "{{ gen_mode }}"
        recurse: yes
      tags: install

    - name: Give slurm user permission to spool
      ansible.builtin.file:
        path: "{{ spool_pth }}"
        owner: slurm
        group: slurm
        state: directory
        mode: "{{ gen_mode }}"
        recurse: yes

    - name: Give slurm user permission to spool directory
      ansible.builtin.file:
        path: "{{ spool_dir }}"
        owner: slurm
        group: slurm
        state: directory
        mode: "{{ common_mode }}"
        recurse: yes

    - name: Create slurm pid directory
      ansible.builtin.file:
        path: "{{ slurm_pidpth }}"
        state: directory
        owner: slurm
        group: slurm
        mode: "{{ gen_mode }}"
        recurse: yes
      tags: install

    - name: Give slurm user permission to slurmctld
      ansible.builtin.file:
        path: "{{ slurmctld_pid }}"
        owner: slurm
        group: slurm
        mode: "{{ gen_mode }}"
        state: touch

    - name: Give slurm user permission to slurmd
      ansible.builtin.file:
        path: "{{ slurmd_pid }}"
        owner: slurm
        group: slurm
        mode: "{{ gen_mode }}"
        state: touch

    - name: Start munge service
      ansible.builtin.systemd:
        name: munge
        state: restarted
        enabled: yes
      tags: install
      failed_when: false

    - name: Install lua and lmod for leap  OS
      block:
        - name: Install packages for lua_lmod
          ansible.builtin.package:
            name: "{{ lmod_packages }}"
            state: present
      when: os_supported_leap in compute_os

    - name: Initialize grafana_status
      ansible.builtin.set_fact:
        grafana_status: false
        grafana_cred_status: false

    - name: Check for grafana folder existence
      ansible.builtin.stat:
        path: "{{ grafana_conf_path }}"
      register: grafana_file_status
      delegate_to: localhost
      run_once: true

    - name: Check for grafana_username and password
      ansible.builtin.set_fact:
          grafana_cred_status: true
      when:
        - grafana_username is defined
        - grafana_password is defined
        - grafana_username | length >= min_length_grafana
        - grafana_password | length >= min_length_grafana

    - name: Save grafana crendentials
      ansible.builtin.set_fact:
        grafana_svc_ip: "{{ lookup('ini', 'ip section=grafana_svc file=/opt/omnia/.data/grafana_svc_details.ini') }}"
        grafana_svc_port: "{{ lookup('ini', 'port section=grafana_svc file=/opt/omnia/.data/grafana_svc_details.ini') }}"
        grafana_status: true
      delegate_to: localhost
      run_once: true
      when: grafana_file_status.stat.exists
