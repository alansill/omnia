# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Include telemetry_config_file.yml

- name: Check that the telemetry_config.yml exists
  ansible.builtin.stat:
    path: "{{ telemetry_config_file }}"
  register: stat_result

- name: Fail if telemetry_config.yml file doesn't exist
  ansible.builtin.fail:
    msg: "{{ fail_msg_telemetry_config_file }}"
  when: not stat_result.stat.exists

- name: Check telemetry_config.yml file is encrypted
  ansible.builtin.command: cat {{ telemetry_config_file }}
  changed_when: false
  register: config_content
  no_log: true

- name: Decrpyt telemetry_login_vars.yml
  ansible.builtin.command: >-
    ansible-vault decrypt {{ telemetry_config_file }}
    --vault-password-file {{ vault_filename }}
  changed_when: false
  when: "'$ANSIBLE_VAULT;' in config_content.stdout"

- name: Include variable file telemetry_config.yml
  ansible.builtin.include_vars: "{{ telemetry_config_file }}"
  no_log: true

- name: Assert idrac telemetry support
  ansible.builtin.assert:
    that:
      - idrac_telemetry_support == true or idrac_telemetry_support == false
    quiet: true
    success_msg: "{{ idrac_telemetry_support_success_msg }}"
    fail_msg: "{{ idrac_telemetry_support_fail_msg }}"

- name: Assert slurm telemetry support
  ansible.builtin.assert:
    that:
      - slurm_telemetry_support == true or slurm_telemetry_support == false
    quiet: true
    success_msg: "{{ slurm_telemetry_support_success_msg }}"
    fail_msg: "{{ slurm_telemetry_support_fail_msg }}"

- name: Assert slurm telemetry support
  ansible.builtin.assert:
    that:
      - idrac_telemetry_support == true
    quiet: true
    success_msg: "{{ slurm_telemetry_idrac_support_success_msg }}"
    fail_msg: "{{ slurm_telemetry_idrac_support_fail_msg }}"
  when: slurm_telemetry_support is true

- name: Assert timescale db name
  ansible.builtin.assert:
    that: timescaledb_name | length > 1
    success_msg: "{{ timescaledb_success_msg }}"
    fail_msg: "{{ timescaledb_fail_msg }}"

- name: Assert mysql db name
  ansible.builtin.assert:
    that: mysqldb_name | length > 1
    success_msg: "{{ mysqldb_success_msg }}"
    fail_msg: "{{ mysqldb_fail_msg }}"

- name: Install dos2unix package
  ansible.builtin.package:
    name: dos2unix
    state: present

- name: Convert timezone.txt to linux format
  ansible.builtin.command: dos2unix {{ role_path }}/files/timezone.txt
  failed_when: false
  changed_when: false

- name: Searching for timezone
  ansible.builtin.lineinfile:
    path: "{{ role_path }}/files/timezone.txt"
    line: "{{ timezone }}"
    state: present
  check_mode: true
  register: timezone_search

- name: Assert timezone
  ansible.builtin.assert:
    that: timezone_search is not changed
    fail_msg: "{{ fail_timezone_msg }}"
  register: timezone_check

- name: Assert usernames and passwords in telemetry_login_vars.yml
  block:
    - name: Assert timescaledb user name
      ansible.builtin.assert:
        that:
          - timescaledb_user | length > 1
          - '"-" not in timescaledb_user '
          - '"\\" not in timescaledb_user '
          - '"\"" not in timescaledb_user '
          - " \"'\" not in timescaledb_user "
      no_log: true

    - name: Assert timescaledb user password
      ansible.builtin.assert:
        that:
          - timescaledb_password | length > 1
          - '"-" not in timescaledb_password '
          - '"\\" not in timescaledb_password '
          - '"\"" not in timescaledb_password '
          - " \"'\" not in timescaledb_password "
          - '"@" not in timescaledb_password '
      no_log: true

    - name: Assert mysqldb user name
      ansible.builtin.assert:
        that:
          - mysqldb_user | length > 1
          - '"-" not in mysqldb_user '
          - '"\\" not in mysqldb_user '
          - '"\"" not in mysqldb_user '
          - " \"'\" not in mysqldb_user "
      no_log: true

    - name: Assert mysqldb user password
      ansible.builtin.assert:
        that:
          - mysqldb_password | length > 1
          - '"-" not in mysqldb_password '
          - '"\\" not in mysqldb_password '
          - '"\"" not in mysqldb_password '
          - " \"'\" not in mysqldb_password "
      no_log: true

    - name: Assert mysqldb root user password
      ansible.builtin.assert:
        that:
          - mysqldb_root_password | length > 1
          - '"-" not in mysqldb_root_password '
          - '"\\" not in mysqldb_root_password '
          - '"\"" not in mysqldb_root_password '
          - " \"'\" not in mysqldb_root_password "
      no_log: true

  rescue:
    - name: Validation issue in telemetry_config.yml
      ansible.builtin.fail:
        msg: "{{ login_vars_fail_msg }}"

- name: Create ansible vault key
  ansible.builtin.set_fact:
    vault_key: "{{ lookup('password', '/dev/null chars=ascii_letters') }}"
  when: "'$ANSIBLE_VAULT;' not in config_content.stdout"

- name: Save vault key
  ansible.builtin.lineinfile:
    path: "{{ vault_filename }}"
    line: "{{ vault_key }}"
    mode: "{{ vault_file_perm }}"
    owner: root
    create: true
  when: "'$ANSIBLE_VAULT;' not in config_content.stdout"

- name: Assert grafana credentials
  block:
    - name: Assert grafana_username and grafana_username
      ansible.builtin.assert:
        that:
          - grafana_username | length >= min_length_grafana
          - grafana_username | length <= max_length
          - '"-" not in grafana_username '
          - '"\\" not in grafana_username '
          - '"\"" not in grafana_username '
          - " \"'\" not in grafana_username "
          - grafana_password | length >= min_length_grafana
          - grafana_password | length <= max_length
          - not grafana_password == 'admin'
          - '"-" not in grafana_password '
          - '"\\" not in grafana_password '
          - '"\"" not in grafana_password '
          - " \"'\" not in grafana_password "
      no_log: true
  rescue:
    - name: Validation issue in input/monitor_config.yml
      ansible.builtin.fail:
        msg: "{{ monitor_config_fail_msg }}"

- name: Verify Inventory file for Slurm telemetry
  when: slurm_telemetry_support
  any_errors_fatal: true
  block:
    - name: Verify Inventory file
      ansible.builtin.fail:
        msg: "{{ inventory_absent_message }}"
      when:
        - groups['manager'] is not defined
        - groups['compute'] is not defined

    - name: Verify manager group in inventory
      ansible.builtin.assert:
        that: "groups['manager'] | length | int == 1"
        fail_msg: "{{ telemetry_manager_group_fail_msg }}"
        success_msg: "{{ telemetry_manager_group_success_msg }}"

    - name: Verify compute group in inventory
      ansible.builtin.assert:
        that: "groups['compute'] | length | int >= 1"
        fail_msg: "{{ telemetry_compute_group_fail_msg }}"
        success_msg: "{{ telemetry_compute_group_success_msg }}"

- name: Verify iDRAC username and password
  when: idrac_telemetry_support
  block:
    - name: Assert idrac_username and idrac_password
      ansible.builtin.assert:
        that:
          - idrac_username | length >= min_length_idrac
          - idrac_username | length < max_length
          - '"-" not in idrac_username '
          - '"\\" not in idrac_username '
          - '"\"" not in idrac_username '
          - " \"'\" not in idrac_username "
          - idrac_password | length > min_length_idrac | int - 1
          - idrac_password | length < max_length | int + 1
          - '"-" not in idrac_password '
          - '"\\" not in idrac_password '
          - '"\"" not in idrac_password '
          - " \"'\" not in idrac_password "
      no_log: true
  rescue:
    - name: Extra variables not provided correctly
      ansible.builtin.fail:
        msg: "{{ idrac_credentials_fail_msg }}"

- name: Validate node_password
  when: slurm_telemetry_support
  block:
    - name: Assert node_password
      ansible.builtin.assert:
        that:
          - node_password | length > 1
      no_log: true
  rescue:
    - name: Validation status of node_password
      ansible.builtin.fail:
        msg: "{{ node_password_fail_msg }}"

- name: Encrypt telemetry_config.yml file
  ansible.builtin.command: >-
    ansible-vault encrypt {{ telemetry_config_file }}
    --vault-password-file {{ vault_filename }}
  changed_when: false
