# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Validate os and os version
  ansible.builtin.assert:
    that:
      - os_type | length > 1
      - os_version | length > 1
    success_msg: "{{ os_version_success_msg }}"
    fail_msg: "{{ os_version_fail_msg }}"

- name: Initiallize os_image
  ansible.builtin.set_fact:
    os_image: ""

- name: Fetch xcat osimage name
  ansible.builtin.shell: >
    set -o pipefail && \
    lsdef -t osimage | grep "{{ osimage_search_key }}" | grep "{{ os_type }}" | grep "{{ os_version }}"
  changed_when: false
  register: fetch_osimage
  failed_when: false

- name: Set os_image
  ansible.builtin.set_fact:
    os_image: "{{ fetch_osimage.stdout.split(' ')[0] }}"
  when: fetch_osimage.rc == 0

- name: Fetch otherpkgdir path
  ansible.builtin.shell: >
    set -o pipefail && \
    lsdef -t osimage -o {{ os_image }} -i otherpkgdir | grep otherpkgdir
  changed_when: false
  register: fetch_otherpkgdir

- name: Set provision_os_image
  ansible.builtin.set_fact:
    package_dir: "{{ fetch_otherpkgdir.stdout.split('=')[1] }}/custom_software"

- name: Check if package_dir exists
  ansible.builtin.stat:
    path: "{{ package_dir }}"
  register: directory

- name: Assert package_dir path
  ansible.builtin.assert:
    that:
      - directory.stat.exists
    success_msg: "{{ pkg_dir_success_msg }}"
    fail_msg: "{{ pkg_dir_fail_msg }}"

- name: Retry fetching xcat osimage name
  ansible.builtin.shell: >
    set -o pipefail && \
    lsdef -t osimage | grep "{{ osimage_search_key }}" | grep "{{ os_type }}"
  changed_when: false
  register: retry_fetch_osimage
  when:
    - fetch_osimage.rc != 0
    - os_type == "rocky"
    - os_version == "8.7"

- name: Set os_image
  ansible.builtin.set_fact:
    os_image: "{{ retry_fetch_osimage.stdout.split(' ')[0] }}"
  when:
    - fetch_osimage.rc != 0
    - os_type == "rocky"
    - os_version == "8.7"

- name: Validate os_version exists
  ansible.builtin.fail:
    msg: "{{ os_version_fail_msg }}"
  when:
    - osimage_search_key not in os_image

- name: Validate package list
  ansible.builtin.assert:
    that:
      - package_list | length > 1
    success_msg: "{{ pkg_list_success_msg }}"
    fail_msg: "{{ pkg_list_fail_msg }}"

- name: Validate package type
  ansible.builtin.assert:
    that:
      - package_type | length > 1
    success_msg: "{{ pkg_type_success_msg }}"
    fail_msg: "{{ pkg_type_fail_msg }}"

- name: Verify the value of package_type is valid
  ansible.builtin.assert:
    that:
      - package_type == "os" or package_type == "other"
    success_msg: "{{ pkg_type_success_msg }}"
    fail_msg: "{{ pkg_type_fail_msg }}"

- name: Check if package_list exists
  ansible.builtin.stat:
    path: "{{ package_list }}"
  register: pkg_list

- name: Fail when package list not exist
  ansible.builtin.fail:
    msg: "{{ pkg_list_missing_msg }}"
  when: not pkg_list.stat.exists

- name: Check list format
  ansible.builtin.assert:
    that:
      - "'custom_software/' in item"
    success_msg: "{{ list_format_success_msg }}"
    fail_msg: "{{ list_format_fail_msg }}"
  with_lines: "cat {{ package_list }}"
