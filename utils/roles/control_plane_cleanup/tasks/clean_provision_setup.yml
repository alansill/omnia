#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Set control_plane_os
  ansible.builtin.set_fact:
    control_plane_os: "{{ ansible_distribution | lower }}"

- name: Uninstall xCAT
  block:
    - name: Validate xCAT service
      ansible.builtin.command: systemctl status xcatd
      register: xcat_status
      no_log: true
      failed_when: false
      changed_when: false

    - name: Cleanup node info from dhcp
      ansible.builtin.command: makedhcp -d -a
      when: ("running" in xcat_status.stdout)
      failed_when: false
      changed_when: false

    - name: Fetch all the osimage
      ansible.builtin.command: lsdef -t osimage
      register: os_image_list
      failed_when: false
      changed_when: false

    - name: Remove the OS images
      ansible.builtin.command: rmdef -t osimage {{ item.split(' ')[0] }}
      with_items: "{{ os_image_list.stdout_lines }}"
      failed_when: false
      changed_when: false

    - name: Clean host entries of switch
      ansible.builtin.command: makehosts -d switch
      when: ("running" in xcat_status.stdout)
      failed_when: false
      changed_when: false

    - name: Clean host entries of nodes
      ansible.builtin.command: makehosts -d all
      when: ("running" in xcat_status.stdout)
      failed_when: false
      changed_when: false

    - name: Cleanup node info from tftpboot
      ansible.builtin.command: rmdef all
      when: ("running" in xcat_status.stdout)
      failed_when: false
      changed_when: false

    - name: Cleanup node info from DNS
      ansible.builtin.command: makedns -n
      when: ("running" in xcat_status.stdout)
      failed_when: false
      changed_when: false

    - name: Stop xCAT service
      ansible.builtin.systemd:
        name: xcatd
        state: stopped
      when: ("running" in xcat_status.stdout)
      failed_when: false
      no_log: true

    - name: Remove xCAT packages
      ansible.builtin.command: "{{ xcat_packages_path }} -y uninstall"
      no_log: true
      failed_when: false
      changed_when: false

    # Check how many mount overlays exist on /install directories
    - name: Check if mount overlay exists
      ansible.builtin.shell: >
        set -o pipefail && \
        mount | grep /install* | awk '{print $3}'
      changed_when: false
      register: mount_status
      failed_when: false

    # Umount overlays on merged directories
    - name: Unmount mount overlay
      ansible.builtin.shell: >
        set -o pipefail && \
        umount "{{ item }}"
      changed_when: false
      with_items: "{{ mount_status.stdout_lines }}"

    - name: Remove /etc/fstab entries
      ansible.builtin.lineinfile:
        path: "{{ fstab_path }}"
        regexp: "/install*"
        state: absent

    - name: Remove xCAT files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ xcat_cert_path }}"
        - "{{ xcat_data_files_path }}"
        - "{{ xcat_del_files }}"

    - name: Remove xCAT download files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ xcat_download_files }}"
      tags: downloads

    - name: Remove xCAT
      ansible.builtin.package:
        name: "{{ xcat_package }}"
        state: absent
      failed_when: false
      no_log: true
  tags: xcat

- name: Uninstall postgres
  block:
    - name: Remove postgres
      ansible.builtin.package:
        name: "{{ postgres_packages }}"
        state: absent
      failed_when: false
      no_log: true

    - name: Remove postgres directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ pg_dir_path }}"
  tags: postgres

- name: Create omnia folder in opt folder
  ansible.builtin.file:
    path: "{{ omnia_dir }}"
    state: directory
    mode: "{{ file_permission }}"

# Exit monitoring thread
- name: Stop and disable monitoring service
  block:
    - name: Stop omnia service, if started
      ansible.builtin.service:
        name: omnia.service
        state: stopped

    - name: Disable omnia service, if enabled
      ansible.builtin.service:
        name: omnia.service
        enabled: false
  tags: monitoring_thread

- name: Remove epel-release
  ansible.builtin.command: dnf remove epel-release -y
  changed_when: true
  failed_when: false
  when: control_plane_os_redhat in control_plane_os
